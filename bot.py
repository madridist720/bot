# -*- coding: utf-8 -*-
import config
import telebot
import datetime
import timetable
import timetable1
import db
import mail
from parse import get_top_machts as tm
from telebot import types

import logging

logger = telebot.logger
telebot.logger.setLevel(logging.DEBUG)

mail.get_email()
a="ENF  " + str(config.file) + ' .xlsx' #ENF  1 .xlsx
timetable.start(a)
a="GF  " + str(config.file) + ' .xlsx'
timetable1.start(a)
today = datetime.datetime.now()
bot = telebot.TeleBot(config.token)
if (today.day==1 and today.hour==0):
    config.file=config.file+1
    config.week=config.week+1

user_makeup=telebot.types.ReplyKeyboardMarkup(True,False)
user_makeup.row('—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
user_makeup.row('—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É')
user_makeup.row('–º–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
user_makeup.row('–æ—Ç–ø–∏—Å–∫–∞')

admin_makeup = telebot.types.ReplyKeyboardMarkup(True, False)
admin_makeup.row('–∫–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤')
admin_makeup.row('exit')
@bot.message_handler(commands=["admin"])
def admin(message):
    if message.chat.id == 120929625:
        message = bot.send_message(message.chat.id, 'ok', reply_markup=admin_makeup)
        a = bot.register_next_step_handler(message, count_users)
    else:
        bot.send_contact(message.chat.id,992901200120,'Maruf')
        bot.send_message(message.chat.id, '–≤—ã –Ω–µ –∞–¥–º–∏–Ω', reply_markup=user_makeup)

@bot.message_handler(commands=["send_to_all"])
def admin(message):
    if message.chat.id == 120929625:
        bot.send_message(message.chat.id, "–ó–∞–∫–æ–Ω—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ—Ä–∞–∑–æ–π /send" )
        bot.register_next_step_handler(message, send_to_all)



def send_to_all(message):
    if '/send' in message.text:
        db.send_to_all(message.text)
        try:
            bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except:
            pass
    else:
        bot.send_message(message.chat.id, "–ó–∞–∫–æ–Ω—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ—Ä–∞–∑–æ–π /send" )
        send_to_all(message)
def count_users(message):
    a = db.users_count()
    if message.text == '–∫–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤':
        bot.send_message(message.chat.id, '–∫–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ = '+str(a), reply_markup=admin_makeup)
        doc = open('user.txt', 'rb')
        bot.send_document(message.chat.id, doc )
        admin(message)
    elif message.text == 'exit':
        handle_start(message)
@bot.message_handler(commands=["topmatch"])
def topmatch(message):
    try:
        text = tm()
    except:
        text = '–ù–µ—Ç —Ç–æ–ø-–º–∞—Ç—á–µ–π'
    bot.send_message(message.chat.id, text,parse_mode="markdown")


@bot.message_handler(commands=["start"])
def handle_start(message):
    user_makeup=telebot.types.ReplyKeyboardMarkup(True,False)
    user_makeup.row('—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    user_makeup.row('—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É')
    user_makeup.row('–º–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
    user_makeup.row('–æ—Ç–ø–∏—Å–∫–∞')
    bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ' + str(message.from_user.first_name),
                     reply_markup=user_makeup)
'''def repeat_all_messages(message): # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –∏–≥—Ä–∞–µ—Ç –Ω–∏–∫–∞–∫–æ–π —Ä–æ–ª–∏, –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ
    bot.send_message(message.chat.id, message.text)'''
# @bot.message_handler(content_types=["voice"])
# def voice(message):
#     import requests
#     import bd
#
#     file_info = bot.get_file(message.voice.file_id)
#     file = requests.get('https://api.telegram.org/file/bot{0}/{1}'.format(config.token, file_info.file_path)).content
#     myf = open("apple.wav", 'wb')
#     myf.write(file)
#     myf.close()
#     print("–ì–æ–ª–æ—Å")
#     result=bd.start()
#     print("–ì–æ–ª–æ—Å1")
#     print(result)
#     message.text = '–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'
#     handle_text(message)

# # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
# @bot.message_handler(content_types=["text"])
# def any_msg(message):
#     keyboard = types.InlineKeyboardMarkup()
#     callback_button = types.InlineKeyboardButton(text="–†–ï–ê–õ –ú–ê–î–†–ò–î", callback_data="REAL")
#     callback_button1 = types.InlineKeyboardButton(text="–ë–ê–†–°–ï–õ–û–ù–ê", callback_data="BARSA")
#     keyboard.add(callback_button)
#     keyboard.add(callback_button1)
#     bot.send_message(message.chat.id, "–Ø ‚Äì —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞", reply_markup=keyboard)

# import psycopg2 as p
# con = p.connect(database='dfq6banncblc4l', user='vtudqaibjctcaw', host='ec2-23-23-142-5.compute-1.amazonaws.com', password='d9dcd45b804a1510e232ff7b13f9ff260332692b9328bef3e21b8a752ffb389c')
# cur=con.cursor()
# cur.execute('create table result(barsa integet, real integer)')
# con.commit()

# @bot.callback_query_handler(func=lambda call: True)
# def callback_inline(call):
#     print(call)

#     import psycopg2 as p
#     bot = telebot.TeleBot(config.token)
#     con = p.connect(database='dfq6banncblc4l', user='vtudqaibjctcaw', host='ec2-23-23-142-5.compute-1.amazonaws.com',
#                     password='d9dcd45b804a1510e232ff7b13f9ff260332692b9328bef3e21b8a752ffb389c')
#     cur = con.cursor()
#     # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º
#     if call.message:
#         cur.execute("select * from result")
#         m = cur.fetchall()
#         print(m)
#         if call.data == "REAL":
#             text = call.message.text[0:(call.message.text).index('\n')]
#             text = text + call.message.text[(call.message.text).index('\n'):(call.message.text).index('-')+1]+' '+str(m[0][1]+1)+'\n'
#             cur.execute("update result set real=" + str(m[0][1]+1)+ '''
#             where real='''+str(m[0][1]))
#             con.commit()
#             text = text + call.message.text[(call.message.text).rindex('\n')+1:(call.message.text).rindex('-')+1]+' '+str(m[0][0])+'\n'
#             print(text)
#             bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text)

#     # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
#         elif call.data == "BARSA":
#             text = call.message.text[0:(call.message.text).index('\n')]
#             text = text + call.message.text[
#                           (call.message.text).index('\n'):(call.message.text).index('-') + 1] + ' ' + str(
#                 m[0][1]) + '\n'
#             cur.execute("update result set barsa=" + str(m[0][0] + 1)+ '''
#             where barsa='''+str(m[0][0]))
#             con.commit()
#             text = text + call.message.text[
#                           (call.message.text).rindex('\n') + 1:(call.message.text).rindex('-') + 1] + ' ' + str(
#                 m[0][0]+1) + '\n'
#             print(text)
#             bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text)


# def parse_message(message):
#     print(message.text)
#     if message.text == '–ù–∞–∂–º–∏ –º–µ–Ω—è':
#         bot.send_message(message.chat.id, message.text)

@bot.message_handler(content_types=["text"])
def handle_text(message):
    print(message.text)
    #bot.send_message(message.chat.id, message.text)
    if message.text == '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        mail.get_email()
        a = "ENF  " + str(config.file) + ' .xlsx'  # ENF  1 .xlsx
        timetable.start(a)
        a = "GF  " + str(config.file) + ' .xlsx'
        timetable1.start(a)
        a=config.file
        db.new_week()
        print(a)
        if config.file!= a :
            print("–¥–∞")
            a = "ENF  " + str(config.file) + ' .xlsx'
            timetable.start(a)
            a = "GF  " + str(config.file) + ' .xlsx'
            timetable1.start(a)
        db.new_week()
        print(config.file)
        keyboard=types.ReplyKeyboardMarkup()
        keyboard.add('–ï–ù–§')
        keyboard.add('–ì–§')
        message1=bot.send_message(message.chat.id,'–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç',reply_markup=keyboard)
        bot.register_next_step_handler(message1, fuc)
        #rasp_type(message)
    elif message.text =='–≤–Ω–∞—á–∞–ª–æ':
        handle_start(message)
        #bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
    elif message.text=="—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É":
        regist(message)
    elif message.text =='–æ—Ç–ø–∏—Å–∫–∞':
        a = db.delete_me(message.chat.id)
        bot.send_message(message.chat.id, a, parse_mode="markdown",reply_markup=user_makeup )
    elif message.text=='–º–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è':
        mail.get_email()
        a = "ENF  " + str(config.file) + ' .xlsx'  # ENF  1 .xlsx
        timetable.start(a)
        a = "GF  " + str(config.file) + ' .xlsx'
        timetable1.start(a)
        res=db.search_my(message)
        if res!=[]:
            my_time(message, res)
        else:
            bot.send_message(message.chat.id, "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üò£ \n–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É  \n'—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É'")
            handle_start(message);
    else:
        bot.send_message(message.chat.id,"–ù–ï–ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ö–û–ú–ê–ù–î–ê ")
        handle_start(message);
def my_time(message, res):
    print(res)
    pr= res[0][1]
    kr=res[0][2]
    print(pr)
    print(kr)  
    a=config.file
    b=config.week
    db.new_week()
        
    if config.file!= a :
        print("–¥–∞")
        a = "ENF  " + str(config.file) + ' .xlsx'
        timetable.start(a)
        a = "GF  " + str(config.file) + ' .xlsx'
        timetable1.start(a)
    db.new_week()
    today = datetime.datetime.now()
    sl="–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è :\n"
    print(today.time().hour, today.time().minute)
    dn = datetime.date.today().isoweekday()
    if (today.time().hour>=13 ):
        dn=dn+1
        if dn>7:
            dn=1
            a = "ENF  " + str(int(config.file)+1) + ' .xlsx'
            timetable.start(a)
            a = "GF  " + str(int(config.file)+1) + ' .xlsx'
            timetable1.start(a)
        sl="–°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –ø–∞—Ä –Ω–µ—Çüòâ\nüíº–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞üéì:\n"
    if pr in ("–ú–û", "–ì–ú–£"):
        z=timetable1.get_day(pr,kr, dn)
    elif pr == "–õ–∏–Ω–≥–≤":
        z=timetable1.get_day('–õ–ò–ù–ì–í',kr,dn)
    else:
        if pr=='–ü–ú–ò':
            z = timetable.get_day("–ü–ú–ò–ò",kr,dn)
        elif pr=='–ì–µ–æ–ª–æ–≥–∏—è':

            z = timetable.get_day("–ì–ï–û–õ",kr,dn)
            print(z)
        elif pr=='–•–∏–º–∏—è':
            z = timetable.get_day("–•–ò–ú–§",kr, dn)
        
    bot.send_message(message.chat.id, sl+z,parse_mode="markdown",reply_markup=user_makeup)


def regist(message):
    keyboard1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
    today = datetime.date.today().isoweekday()
    keyboard1.add("–ú–û", "–ì–ú–£","–õ–∏–Ω–≥–≤")
    keyboard1.add("–ü–ú–ò","–ì–µ–æ–ª–æ–≥–∏—è", "–•–∏–º–∏—è")
    message1 = bot.send_message(message.chat.id, '–≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', reply_markup=keyboard1)
    bot.register_next_step_handler(message, regist1)
def regist1(message):
    config.pod_pr=message.text
    pr=message.text
    if pr in ("–ú–û", "–ì–ú–£","–õ–∏–Ω–≥–≤","–ü–ú–ò","–ì–µ–æ–ª–æ–≥–∏—è", "–•–∏–º–∏—è"):
        keyboard2 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard2.add("1-—ã–π –∫—É—Ä—Å", '2-–æ–π –∫—É—Ä—Å')
        keyboard2.add('3-–∏–π –∫—É—Ä—Å', '4-—ã–π –∫—É—Ä—Å')
        bot.send_message(message.chat.id, '–≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å', reply_markup=keyboard2)
        bot.register_next_step_handler(message,start)
    elif pr=="–†–µ–∫–ª–∞–º–∞":
        start(message)
def start(message):
    pr=config.pod_pr
    kr=message.text
    if pr in ("–ú–û", "–ì–ú–£", "–õ–∏–Ω–≥–≤","–ü–ú–ò","–ì–µ–æ–ª–æ–≥–∏—è", "–•–∏–º–∏—è"):
        z=db.start(message,pr,kr[0])
        bot.send_message(message.chat.id,z)
        handle_start(message)
    elif pr=="–†–µ–∫–ª–∞–º–∞":
        z=db.start(message, pr, 0)
        bot.send_message(message.chat.id, z)
        handle_start(message)
def fuc(message):
    if message.text=='–ï–ù–§':
        rasp_type(message)
    elif message.text=='–ì–§':
        rasp_type1(message)
def rasp_type1(message):
    from telebot import types
    keyboard1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
    today = datetime.datetime.now()
    keyboard1.add("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
    keyboard1.add("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏")
    if (today.isoweekday() == 7) or (today.isoweekday() == 6 and today.hour >= 13):
        keyboard1.add("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥ –Ω–µ–¥–µ–ª—é")
    keyboard1.add("–ù–∞–∑–∞–¥")

    message1 = bot.send_message(message.chat.id, '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è', reply_markup=keyboard1)
    bot.register_next_step_handler(message1, start_m1)
def start_m1(message):
    if message.text in ("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è","–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏","–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥ –Ω–µ–¥–µ–ª—é"):
        config.rasp_type=message.text
        keyboard1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        today = datetime.date.today().isoweekday()
        keyboard1.add("–ú–û","–ì–ú–£")
        keyboard1.add("–õ–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞")
        keyboard1.add("–ù–∞–∑–∞–¥")
        message1 = bot.send_message(message.chat.id, '–≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', reply_markup=keyboard1)
        bot.register_next_step_handler(message1, start_nap1)
    elif message.text=="–ù–∞–∑–∞–¥":
        fuc(message)

    else:
        bot.send_message(message.chat.id, "–≤—ã–±—Ä–∞–Ω –Ω–µ–ø—Ä–∞–≤–µ–ª—å–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        rasp_type1(message)
def start_nap1(message1):
    from telebot import types
    user_makeup = telebot.types.ReplyKeyboardRemove()
    pr = (message1.text)
    if pr in ("–ú–û", "–ì–ú–£", "–õ–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞", '–†–µ–∫–ª–∞–º–∞'):
        config.pr = pr
        keyboard2 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard2.add("1-—ã–π –∫—É—Ä—Å", '2-–æ–π –∫—É—Ä—Å')
        keyboard2.add('3-–∏–π –∫—É—Ä—Å', '4-—ã–π –∫—É—Ä—Å')
        keyboard2.add("–ù–∞–∑–∞–¥")
        if pr =='–†–µ–∫–ª–∞–º–∞':
            if (config.rasp_type == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'):
                 start_kur1(message1)
                 return 0
            elif (config.rasp_type == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏"):
                pasp_ned1(message1)
                return 0
            elif (config.rasp_type == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥ –Ω–µ–¥–µ–ª—é"):
                a = config.file
                # print(z)
                config.file = a

                past_nex_ned1(message1)
                return 0
        bot.send_message(message1.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫—É—Ä—Å', reply_markup=keyboard2)
        if (config.rasp_type == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'):
            bot.register_next_step_handler(message1, start_kur1)
        elif (config.rasp_type == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏"):
            bot.register_next_step_handler(message1, pasp_ned1)
        elif (config.rasp_type == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥ –Ω–µ–¥–µ–ª—é"):
            a = config.file
            # print(z)
            config.file = a

            bot.register_next_step_handler(message1, past_nex_ned1)


    elif pr == "–ù–∞–∑–∞–¥":
        rasp_type1(message1)

    else:
        bot.send_message(message1.chat.id, '–æ—à–∏–±–∫–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
        bot.register_next_step_handler(message1, start_nap1)
def start_kur1(message1):
    pr = config.pr
    f = open('text.txt', 'r')
    a = f.read()
    f.close()
    # print(a)
    global user_makeup
    a = a.split()
    if str(message1.chat.id) not in a:
        f = open('text.txt', 'a')
        f.write(
            str(message1.chat.id) + ' ' + str(message1.from_user.first_name) + ' ' + str(message1.from_user.last_name))
    f.close()
    print(message1.chat.id)
    from telebot import types
    #user_makeup = telebot.types.ReplyKeyboardRemove()
    kr = message1.text
    # print(kr)
    if pr =="–†–µ–∫–ª–∞–º–∞":
        dn = datetime.date.today().isoweekday()
        bot.send_message(message1.chat.id, '–∑–∞–≥—Ä—É–∑–∫–∞ —Å —Ñ–∞–π–ª–∞...')
        z = timetable1.get_day("–†–ï–ö–°",0, dn)
        bot.send_message(message1.chat.id, z, reply_markup=user_makeup, parse_mode='markdown')

        return 0
    if kr[0] in ("1", "2", "3", "4") :
        dn = datetime.date.today().isoweekday()
        bot.send_message(message1.chat.id, '–∑–∞–≥—Ä—É–∑–∫–∞ —Å —Ñ–∞–π–ª–∞...')
        # rasp.start()
        if pr == '–ú–û':
            z = timetable1.get_day("–ú–û", int(kr[0]), dn)
        elif pr == '–ì–ú–£':

            z = timetable1.get_day("–ì–ú–£", int(kr[0]), dn)
        elif pr =="–õ–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞":
            z=timetable1.get_day("–õ–ò–ù–ì–í",int(kr[0]), dn)
        try:
            bot.send_message(message1.chat.id, z, reply_markup=user_makeup, parse_mode='markdown')
        # bot.send_message(message1.chat.id, '*–ø—Ä–æ–¥–æ–ª–∂–∏–º?*', parse_mode='markdown')
        except:
            bot.send_message(message1.chat.id, z, reply_markup=user_makeup)
        # handle_start(message1)
        #bot.send_message(message1.chat.id, "–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /start")

    elif kr == "–ù–∞–∑–∞–¥":
        start_nap1(message1)
    else:
        bot.send_message(message1.chat.id, '–æ—à–∏–±–∫–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å')
        bot.register_next_step_handler(message1, start_kur1)
def pasp_ned1(message1):
    pr = config.pr
    from telebot import types
    #user_makeup = telebot.types.ReplyKeyboardRemove()
    kr = message1.text
    print(kr)
    z = ''
    dn = datetime.date.today().isoweekday()
    if kr[0] in ("1", "2", "3", "4"):
        bot.send_message(message1.chat.id, '–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...')
        # rasp.start()
        if pr == '–ú–û':
            z = timetable1.get_last_day("–ú–û", int(kr[0]), dn)
        elif pr == '–ì–ú–£':

            z = timetable1.get_last_day("–ì–ú–£", int(kr[0]), dn)
            print(z)
        elif pr == '–õ–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞':
            z = timetable1.get_last_day("–õ–ò–ù–ì–í", int(kr[0]), dn)


        bot.send_message(message1.chat.id, z, parse_mode='markdown', reply_markup=user_makeup)
        # bot.send_message(message1.chat.id, '*–ø—Ä–æ–¥–æ–ª–∂–∏–º?*', parse_mode='markdown')
        # rasp_t=config.rasp_type

        # bot.send_message(message1.chat.id, z, parse_mode='markdown')
        # handle_start(message1)
        #bot.send_message(message1.chat.id, "–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞  /start")
    elif pr == "–†–µ–∫–ª–∞–º–∞":
        z = timetable1.get_last_day("–†–ï–ö–°", 0, dn)
        bot.send_message(message1.chat.id, z, parse_mode='markdown', reply_markup=user_makeup)
        # bot.send_message(message1.chat.id, '*–ø—Ä–æ–¥–æ–ª–∂–∏–º?*', parse_mode='markdown')
        # rasp_t=config.rasp_type

        # bot.send_message(message1.chat.id, z, parse_mode='markdown')
        # handle_start(message1)
        #bot.send_message(message1.chat.id, "–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞  /start")
    elif kr == "–ù–∞–∑–∞–¥":
        start_nap1(message1)
    else:
        bot.send_message(message1.chat.id, '–æ—à–∏–±–∫–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å')
        bot.register_next_step_handler(message1, start_kur1)
def past_nex_ned1(message1):
    pr = config.pr
    from telebot import types
    #user_makeup = telebot.types.ReplyKeyboardRemove()
    kr = message1.text
    print(kr)
    z = ''
    bot.send_message(message1.chat.id, '*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...*', parse_mode='markdown')
    a = "GF  " + str(int(config.file)+1) + ' .xlsx'
    timetable1.start(a)


    dn = datetime.date.today().isoweekday()
    if kr[0] in ("1", "2", "3", "4"):
        bot.send_message(message1.chat.id, '–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...')
        # rasp.start()
        if pr == '–ú–û':
            z = timetable1.get_week("–ú–û", int(kr[0]))
        elif pr == '–ì–ú–£':

            z = timetable1.get_week("–ì–ú–£", int(kr[0]))
            print(z)
        elif pr == '–õ–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞':
            z = timetable1.get_week("–õ–ò–ù–ì–í", int(kr[0]))

        bot.send_message(message1.chat.id, z, parse_mode='markdown', reply_markup=user_makeup)
        # bot.send_message(message1.chat.id, '*–ø—Ä–æ–¥–æ–ª–∂–∏–º?*', parse_mode='markdown')
        # rasp_t=config.rasp_type

        # bot.send_message(message1.chat.id, z, parse_mode='markdown')
        # handle_start(message1)
        #bot.send_message(message1.chat.id, "–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞  /start")
        a = "GF  " + str(config.file) + ' .xlsx'
        timetable1.start(a)
    elif pr == "–†–µ–∫–ª–∞–º–∞":
        z = timetable1.get_week("–†–ï–ö–°", 0)
        bot.send_message(message1.chat.id, z, parse_mode='markdown', reply_markup=user_makeup)
        # bot.send_message(message1.chat.id, '*–ø—Ä–æ–¥–æ–ª–∂–∏–º?*', parse_mode='markdown')
        # rasp_t=config.rasp_type

        # bot.send_message(message1.chat.id, z, parse_mode='markdown')
        # handle_start(message1)
        #bot.send_message(message1.chat.id, "–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞  /start")
    elif kr == "–ù–∞–∑–∞–¥":
        start_nap1(message1)
    else:
        bot.send_message(message1.chat.id, '–æ—à–∏–±–∫–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å')
        bot.register_next_step_handler(message1, start_kur1)
def rasp_type(message):
    from telebot import types
    keyboard1=types.ReplyKeyboardMarkup(resize_keyboard=True)
    today=datetime.datetime.now()
    keyboard1.add("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
    keyboard1.add("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏")
    if(today.isoweekday()==7) or (today.isoweekday()==6 and today.hour>=13):
        keyboard1.add("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥ –Ω–µ–¥–µ–ª—é")
    keyboard1.add("–ù–∞–∑–∞–¥")

    message1=bot.send_message(message.chat.id, '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è', reply_markup=keyboard1)
    bot.register_next_step_handler(message1,start_m)
def start_m(message):
    if message.text in ("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è","–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏","–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥ –Ω–µ–¥–µ–ª—é"):
        config.rasp_type=message.text
        keyboard1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        today = datetime.date.today().isoweekday()
        keyboard1.add("–ü–ú–ò","–ì–µ–æ–ª–æ–≥–∏—è")
        keyboard1.add("–•–∏–º–∏—è")
        keyboard1.add("–ù–∞–∑–∞–¥")
        message1 = bot.send_message(message.chat.id, '–≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', reply_markup=keyboard1)
        bot.register_next_step_handler(message1, start_nap)
    elif message.text=="–ù–∞–∑–∞–¥":
        handle_start(message)

    else:
        bot.send_message(message.chat.id, "–≤—ã–±—Ä–∞–Ω –Ω–µ–ø—Ä–∞–≤–µ–ª—å–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        rasp_type(message)
def start_nap(message1):
    #print(message1.text)
    from telebot import types
    user_makeup = telebot.types.ReplyKeyboardRemove()
    pr=(message1.text)
    if pr in ("–ü–ú–ò", "–ì–µ–æ–ª–æ–≥–∏—è","–•–∏–º–∏—è"):
        config.pr=pr
        keyboard2 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard2.add("1-—ã–π –∫—É—Ä—Å",'2-–æ–π –∫—É—Ä—Å')
        keyboard2.add('3-–∏–π –∫—É—Ä—Å','4-—ã–π –∫—É—Ä—Å')
        keyboard2.add("–ù–∞–∑–∞–¥")
        bot.send_message(message1.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫—É—Ä—Å', reply_markup=keyboard2)

        if (config.rasp_type == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'):
            bot.register_next_step_handler(message1, start_kur)
        elif (config.rasp_type=="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏"):
            bot.register_next_step_handler(message1,pasp_ned)
        elif (config.rasp_type=="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥ –Ω–µ–¥–µ–ª—é"):
                a=config.file
                #print(z)
                config.file=a

                bot.register_next_step_handler(message1,past_nex_ned)
    elif pr=="–ù–∞–∑–∞–¥":
       rasp_type(message1)

    else:
        bot.send_message(message1.chat.id, '–æ—à–∏–±–∫–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
        bot.register_next_step_handler(message1,start_nap)



    #bot.send_message(message1.chat.id,'',reply_markup=user_makeup)
def start_kur(message1):
    pr=config.pr

    print(message1.chat.id)
    from telebot import types
    #user_makeup = telebot.types.ReplyKeyboardRemove()
    kr=message1.text
    #print(kr)
    if kr[0] in ("1","2","3","4"):
        dn = datetime.date.today().isoweekday()
        bot.send_message(message1.chat.id, '–∑–∞–≥—Ä—É–∑–∫–∞ —Å —Ñ–∞–π–ª–∞...')
        #rasp.start()
        if pr=='–ü–ú–ò':
            z = timetable.get_day("–ü–ú–ò–ò",int(kr[0]),dn)
        elif pr=='–ì–µ–æ–ª–æ–≥–∏—è':

            z = timetable.get_day("–ì–ï–û–õ",int(kr[0]),dn)
            print(z)
        elif pr=='–•–∏–º–∏—è':
            z = timetable.get_day("–•–ò–ú–§",int(kr[0]), dn)
        try:
            bot.send_message(message1.chat.id, z, reply_markup=user_makeup, parse_mode='markdown')
        #bot.send_message(message1.chat.id, '*–ø—Ä–æ–¥–æ–ª–∂–∏–º?*', parse_mode='markdown')
        except:
            bot.send_message(message1.chat.id, z, reply_markup=user_makeup)
        #handle_start(message1)
        #bot.send_message(message1.chat.id, "–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /start")
    elif kr=="–ù–∞–∑–∞–¥":
        start_nap(message1)
    else:
        bot.send_message(message1.chat.id, '–æ—à–∏–±–∫–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å')
        bot.register_next_step_handler(message1, start_kur)

def pasp_ned(message1):
    pr = config.pr
    from telebot import types
    #user_makeup = telebot.types.ReplyKeyboardRemove()
    kr = message1.text
    print(kr)
    z=''
    dn = datetime.date.today().isoweekday()
    if kr[0] in ("1", "2", "3", "4"):
        bot.send_message(message1.chat.id, '–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...')
        #rasp.start()
        print(pr)
        if pr == '–ü–ú–ò':
            z = timetable.get_last_day("–ü–ú–ò–ò", int(kr[0]),dn)
            print('sended')
        elif pr == '–ì–µ–æ–ª–æ–≥–∏—è':
            z = timetable.get_last_day("–ì–ï–û–õ", int(kr[0]),dn)
        elif  pr == '–•–∏–º–∏—è':
            z = timetable.get_last_day("–•–ò–ú–§", int(kr[0]),dn)

        bot.send_message(message1.chat.id, z, parse_mode='markdown', reply_markup=user_makeup)
        #bot.send_message(message1.chat.id, '*–ø—Ä–æ–¥–æ–ª–∂–∏–º?*', parse_mode='markdown')
        #rasp_t=config.rasp_type

        #bot.send_message(message1.chat.id, z, parse_mode='markdown')
        #handle_start(message1)
        #bot.send_message(message1.chat.id, "–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞  /start")
    elif kr=="–ù–∞–∑–∞–¥":
        start_nap(message1)
    else:
        bot.send_message(message1.chat.id, '–æ—à–∏–±–∫–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å')
        bot.register_next_step_handler(message1, start_kur)
def past_nex_ned(message1):
    pr = config.pr
    from telebot import types
    #user_makeup = telebot.types.ReplyKeyboardRemove()
    kr = message1.text
    #print(kr)
    z = ''
    dn = datetime.date.today().isoweekday()
    if kr[0] in ("1", "2", "3", "4"):
        bot.send_message(message1.chat.id, '*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...*', parse_mode='markdown')

        a = "ENF  " + str(int(config.file)+1) + ' .xlsx'
        timetable.start(a)


        if pr == '–ü–ú–ò':
            z = z + timetable.get_week("–ü–ú–ò–ò", int(kr[0]))
        elif pr == '–ì–µ–æ–ª–æ–≥–∏—è':
            z = z + timetable.get_week("–ì–ï–û–õ", int(kr[0]))
        elif pr == '–•–∏–º–∏—è':
            z = z+timetable.get_week("–•–ò–ú–§", int(kr[0]))
        #bot.send_message(message1.chat.id, z, parse_mode='markdown', reply_markup=user_makeup)
        #z.replace('*','')
        #rasp_t = config.rasp_type

        bot.send_message(message1.chat.id, z, parse_mode='markdown',reply_markup=user_makeup)

        a = "ENF  " + str(config.file) + ' .xlsx'
        timetable.start(a)
        #handle_start(message1)
        #bot.send_message(message1.chat.id, "–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞  /start")
    elif kr=="–ù–∞–∑–∞–¥":
        start_nap(message1)
    else:
        bot.send_message(message1.chat.id, '–æ—à–∏–±–∫–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å')
        bot.register_next_step_handler(message1, start_kur)

def while_main():
    bot.polling()
    
if __name__ == '__main__':
    try:
        bot.polling()
    except:
        while_main()

